package test;


import java.io.File;
import java.io.IOException;
import java.util.concurrent.TimeUnit;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.remote.CapabilityType;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.testng.Assert;
import org.testng.ITestResult;
import org.testng.Reporter;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;
import utility.MobileUtility;
import io.appium.java_client.android.AndroidDriver;
import io.appium.java_client.android.AndroidElement;
import top.Equipment;
import top.Login;
import top.MainPage;
import top.WOCloseConfirmation;
import top.WoPage;
import utility.BaseApk;

public class App_Sanity{

	private static final Logger log = LogManager.getLogger(App_Sanity.class.getName());
	//private static final String ESCAPE_PROPERTY = "org.uncommons.reportng.escape-output";
	private String[] httpConnectionDetails; 
	private String userName, password, environment; 
	
//	private Timestamp timestamp;

	
	AndroidDriver<AndroidElement> driver;
	private Login login;
	private MainPage mp;
	private WoPage wo;
	private Equipment eq;
	private WOCloseConfirmation cf;
	
	
	
	
	
	@BeforeClass
	public void Tests_prepration() throws Exception {

		//		String currentDir = TopUtility.getUserDir(System.getProperty("user.dir"));
		//		log.info("system.dir is: " + currentDir);
		//		System.setProperty(ESCAPE_PROPERTY, "false");
		
		//		httpConnectionDetails = MobileUtility.returnLoginParams();
		//		userName = httpConnectionDetails[0];
		//		password = httpConnectionDetails[1];
		environment = MobileUtility.getProperty("environment");
		log.info("Testing Enviornment: " + environment);
	}

	@BeforeMethod()
	public void Test_prepration_BeforeMethod() throws Exception {


		MobileUtility.endOfTestDelimiter("Start before method...");
		
		log.info("Start before method...");
		//BaseApk.removeApp("test", true);
		driver = BaseApk.capabilities(environment, true);
		login = new Login(driver);
		mp = new MainPage(driver);
		wo = new WoPage(driver);
		eq = new Equipment(driver);
		cf = new WOCloseConfirmation(driver);
	}

		
	@Test(enabled = true, priority = 1, description="WO process: Replace equipment")
	public void CreateCall() throws Exception {
		String methodName = "פתיחת פנייה באפליקציה";
		String status = "Begin process";
		log.info("Start: " + methodName);
		try {
				status = "try to login";
				//Assert.assertTrue(login.doLogin(userName, password));
				status = "try to verify login";
				//Assert.assertTrue(login.verifySuccessfullLogin());
				status = "try to verify wo exist";
				//Assert.assertTrue(mp.verifyWOexist());
				status = "try to get into WO";
				Assert.assertTrue(mp.getIntoWO(1));
				status = "try to begin closing WO";
				Assert.assertTrue(wo.beginFlowCloseWO("close"));
				status = "try to add equipment to WO ";
				Assert.assertTrue(eq.equipmentAddConvertor("CE120129871696133", "000244000675"));
				status = "try to confirm WO created";
				Assert.assertTrue(cf.confirmWO("התקנת שקע"));
				
				log.info("");
				
		} catch (AssertionError ar) {
			log.error("Test result failed on assertion error: " + status);
			MobileUtility.sendReporter("Test result failed on assertion error: " + status);
			//TopUtility.reportLogScreenshot(TopUtility.printScreen(driver, "Failed_Assert"));
			Reporter.getCurrentTestResult().setStatus(ITestResult.FAILURE);

		} catch (Exception ex) {
			ex.printStackTrace();
			log.error("Test result failed on exception: Please review log file");
			MobileUtility.sendReporter("Test result Please review the log");
			MobileUtility.reportLogScreenshot(MobileUtility.printScreen(driver, "Failed_assert_verification"));
			Reporter.getCurrentTestResult().setStatus(ITestResult.FAILURE);
		}

		MobileUtility.sendReporter("Test Finished: "+ methodName  + " Iteration: 1 ");
		log.info("Test ended: " + methodName +"   Iteration: 1" );
	}
	
	
	@Test(enabled = false, priority = 1, description="WO process: Replace equipment")
	public void TOP_POC_1_1() throws Exception {
		String methodName = "TOP apk WO Change Equipment";

		log.info("Start: " + methodName);
		try {
			
				Assert.assertTrue(login.doLogin(userName, password));
				//Assert.assertTrue(login.verifySuccessfullLogin());
				//Assert.assertTrue(mp.verifyWOexist());
				Assert.assertTrue(mp.getIntoWO(1));
				Assert.assertTrue(wo.beginFlowWO("exchange"));
				Assert.assertTrue(eq.equipmentChange_Remove());
				
				log.info("");
				
		} catch (AssertionError ar) {
			log.error("Test result failed on assertion error: Please review log file");
			MobileUtility.sendReporter("Test result failed on assertion error: ");
			MobileUtility.reportLogScreenshot(MobileUtility.printScreen(driver, "Failed_Assert"));
			Reporter.getCurrentTestResult().setStatus(ITestResult.FAILURE);

		} catch (Exception ex) {
			ex.printStackTrace();
			log.error("Test result failed on exception: Please review log file");
			MobileUtility.sendReporter("Test result Please review the log");
			MobileUtility.reportLogScreenshot(MobileUtility.printScreen(driver, "Failed_assert_verification"));
			Reporter.getCurrentTestResult().setStatus(ITestResult.FAILURE);
		}

		MobileUtility.sendReporter("Test Finished: "+ methodName  + " Iteration: 1 ");
		log.info("Test ended: " + methodName +"   Iteration: 1" );
	}
	
	

	
	
		@Test(enabled = false, priority = 2, description="valid login")
		public void TOP_POC_2() throws Exception {
			String methodName = "TOP apk Close WO";

			log.info("Start: " + methodName);
			try {
				
					Assert.assertTrue(login.doLogin(userName, password));
					Assert.assertTrue(login.verifySuccessfullLogin());
					Assert.assertTrue(mp.verifyWOexist());
					Assert.assertTrue(mp.getIntoWO(1));
					Assert.assertTrue(wo.beginFlowWO("close"));

					log.info("");
					
			} catch (AssertionError ar) {
				log.error("Test result failed on assertion error: Please review log file");
				MobileUtility.sendReporter("Test result failed on assertion error: ");
				MobileUtility.reportLogScreenshot(MobileUtility.printScreen(driver, "Failed_Assert"));
				Reporter.getCurrentTestResult().setStatus(ITestResult.FAILURE);

			} catch (Exception ex) {
				ex.printStackTrace();
				log.error("Test result failed on exception: Please review log file");
				MobileUtility.sendReporter("Test result Please review the log");
				MobileUtility.reportLogScreenshot(MobileUtility.printScreen(driver, "Failed_assert_verification"));
				Reporter.getCurrentTestResult().setStatus(ITestResult.FAILURE);
			}

			MobileUtility.sendReporter("Test Finished: "+ methodName  + " Iteration: 1 ");
			log.info("Test ended: " + methodName +"   Iteration: 1" );
		}
		
	
		@Test(enabled = false, priority = 3, description="verify Phone Call Option In WO")
		public void TOP_POC_3() throws Exception {
			String methodName = "TOP WO verify Phone Call Option In WO";

			log.info("Start: " + methodName);
			try {
					Assert.assertTrue(login.doLogin(userName, password));
					Assert.assertTrue(mp.verifyPhoneCallOptionInWO(1));
					
			} catch (AssertionError ar) {
				log.error("Test result failed on assertion error: Please review log file");
				MobileUtility.sendReporter("Test result failed on assertion error: ");
				MobileUtility.reportLogScreenshot(MobileUtility.printScreen(driver, "Failed_Assert"));
				Reporter.getCurrentTestResult().setStatus(ITestResult.FAILURE);

			} catch (Exception ex) {
				ex.printStackTrace();
				log.error("Test result failed on exception: Please review log file");
				MobileUtility.sendReporter("Test result Please review the log");
				MobileUtility.reportLogScreenshot(MobileUtility.printScreen(driver, "Failed_assert_verification"));
				Reporter.getCurrentTestResult().setStatus(ITestResult.FAILURE);
			}

			MobileUtility.sendReporter("Test Finished: "+ methodName  + " Iteration: 1 ");
			log.info("Test ended: " + methodName +"   Iteration: 1" );
		}
		

		// dataProviderClass = HotDataProviders.class)
		@Test(enabled = false, priority = 2, description="invalid login")
		public void TOP_POC_4() throws Exception {
			String methodName = "TOP apk: incorrect login ";

			log.info("Start: " + methodName);
			try {
		
				
				
				
				driver.findElement(By.id("username")).sendKeys("dummyUserName");
				driver.findElement(By.id("password")).sendKeys("mmmm");
				driver.findElement(By.id("login")).click();
				Assert.assertTrue(driver.findElement(By.xpath("//android.widget.TextView[@text='יש להכניס סיסמה בין 6 ל 20 תווים']")).isDisplayed());
				driver.findElement(By.id("dialgo_ok_btn")).click();
				
				driver.findElement(By.id("username")).sendKeys("dummyUserName");
				driver.findElement(By.id("password")).sendKeys("mmmmmm");
				driver.findElement(By.id("login")).click();
				Assert.assertTrue(driver.findElement(By.xpath("//android.widget.TextView[@text='אחד או יותר מפרטי ההזדהות שמסרת שגויים']")).isDisplayed());
				driver.findElement(By.id("dialgo_ok_btn")).click();


			} catch (AssertionError ar) {
				log.error("Test result failed on assertion error: Please review log file");
				MobileUtility.sendReporter("Test result failed on assertion error: ");
				MobileUtility.reportLogScreenshot(MobileUtility.printScreen(driver, "Failed_Assert"));
				Reporter.getCurrentTestResult().setStatus(ITestResult.FAILURE);

			} catch (Exception ex) {
				ex.printStackTrace();
				log.error("Test result failed on exception: Please review log file");
				MobileUtility.sendReporter("Test result Please review the log");
				MobileUtility.reportLogScreenshot(MobileUtility.printScreen(driver, "Failed_assert_verification"));
				Reporter.getCurrentTestResult().setStatus(ITestResult.FAILURE);
			}

			MobileUtility.sendReporter("Test Finished: "+ methodName  + " Iteration: 1 ");
			log.info("Test ended: " + methodName +"   Iteration: 1" );
		}



	@AfterMethod
	public void Exit_Clean_After_Test() throws IOException, InterruptedException {

		log.info("After method ...");
		//driver.manage().deleteAllCookies();
		MobileUtility.endOfTestDelimiter();

	}

	@AfterClass
	public void End_Exectuion() throws IOException, InterruptedException {
		log.info("After Class ...");
	}

	
	
	//driver.findElementByXPath("//android.widget.TextView[@text='Preference']").click();
	//driver.findElementByXPath("//android.widget.TextView[@content-desc='Accessibility']").click();
	//driver.findElement(By.xpath("//android.widget.TextView[@text='Accessibility Service']")).click();
}