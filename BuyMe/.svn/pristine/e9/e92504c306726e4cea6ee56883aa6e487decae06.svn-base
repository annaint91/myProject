package com.project.tests;

import java.io.IOException;
import java.sql.Timestamp;
import org.testng.Assert;
import org.testng.ITestResult;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.By;

import org.testng.Reporter;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;
import com.framework.utility.GeneralUtility;
import com.project.city.AppDataProviders;
import com.project.pages.MainPage;
import com.project.pages.SiteMainPage;
import com.project.utility.ProjectUtility;

import io.appium.java_client.android.AndroidDriver;

import com.inflectra.spiratest.addons.testnglistener.SpiraTestCase;
import com.inflectra.spiratest.addons.testnglistener.SpiraTestConfiguration;

@SpiraTestConfiguration(
	    url="https://ramat-gan.spiraservice.net",
	    login="hagai-t",
	    password="Tamar2015",
	    projectId=8,
	    testSetId=492
	)


@Test(groups={"seleniumtest"})
public class SanityTestMobileChrome_RamatGan {
	
	private static final Logger log = LogManager.getLogger(SanityTestMobileChrome_RamatGan.class.getName());
	private static final String ESCAPE_PROPERTY = "org.uncommons.reportng.escape-output";
	
	private AndroidDriver driver;
	private String baseUrl, browser;
	private Timestamp timestamp;
	private SiteMainPage smp;

	
	@BeforeClass
	public void Tests_prepration_BeforeClass() throws Exception {

		String currentDir = GeneralUtility.getUserDir(System.getProperty("user.dir"));
		browser = "android_browser";
	
		System.setProperty(ESCAPE_PROPERTY, "false");
		log.info("system.dir is: " + currentDir);
		log.info("Environment: " + ProjectUtility.getProperty("environment"));

		timestamp = new Timestamp(System.currentTimeMillis());
		log.info("Time stamp: " + timestamp);
	}

	@BeforeMethod()
	public void Test_prepration_BeforeMethod() throws Exception {
		driver = GeneralUtility.getMobileWebDriver(browser,ProjectUtility.getProperty("url"));
		smp = new SiteMainPage(driver);
		GeneralUtility.finishOfTestDelimiter("Start Test");
	}
	
// חיפוש באפליקציה
	@Test(enabled = true, priority = 1, dataProvider = "iteration", dataProviderClass = AppDataProviders.class)
	@SpiraTestCase(testCaseId=2878)
	public void search_document_in_site(int iteration) throws Exception {
		
		
		timestamp = new Timestamp(System.currentTimeMillis());
		String methodName = "בדיקת חיפוש באתר דרך מובייל";
		GeneralUtility.sendReporter("Test Started at: " + timestamp);
		log.info(methodName + " Test started: " + timestamp + ", Iteration: " + iteration);

		try {
			
			Assert.assertTrue(smp.searchFromSite("הנחות בארנוה"));
			GeneralUtility.reportLogScreenshot(GeneralUtility.printScreen(driver, "process_verification"));
			//driver.quit();
	
			GeneralUtility.sendReporter("Test finish : successfully " + iteration + " " + methodName );
			log.info("Test finish : successfully " + iteration + " " + methodName );

		} catch (AssertionError ar) {
			log.error("Test result failed on assertion error: Please review log file");
			GeneralUtility.sendReporter("Test result failed on assertion error: ");
			GeneralUtility.reportLogScreenshot(GeneralUtility.printScreen(driver, "Failed_Assert"));
			log.log(Level.ERROR, ar);
			Reporter.getCurrentTestResult().setStatus(ITestResult.FAILURE);
		} catch (Exception ex) {
			log.error("Test result failed: Please review log file");
			GeneralUtility.sendReporter("Test result Please review the log");
			GeneralUtility.reportLogScreenshot(GeneralUtility.printScreen(driver, "Failed_assert_verification"));
			Reporter.getCurrentTestResult().setStatus(ITestResult.FAILURE);
			log.log(Level.ERROR, ex);
			Reporter.getCurrentTestResult().setStatus(ITestResult.FAILURE);
		}
		
		timestamp = new Timestamp(System.currentTimeMillis());
		GeneralUtility.sendReporter("Test finish: Iteration: " + iteration +" time:" + timestamp);
		log.info("Test finish: Iteration: " + iteration +" time:" + timestamp);
	}

	

	// תו חניה
		@Test(enabled = true, priority = 1, dataProvider = "iteration", dataProviderClass = AppDataProviders.class)
		@SpiraTestCase(testCaseId=2879)
		public void tav_hania(int iteration) throws Exception {
			
			
			timestamp = new Timestamp(System.currentTimeMillis());
			String methodName = "תו חניה";
			GeneralUtility.sendReporter("Test Started at: " + timestamp);
			log.info(methodName + " Test started: " + timestamp + ", Iteration: " + iteration);

			try {
				
				Assert.assertTrue(smp.getIntoPage("תו חניה"));
				GeneralUtility.reportLogScreenshot(GeneralUtility.printScreen(driver, "process_verification"));
				//driver.quit();
		
				GeneralUtility.sendReporter("Test finish : successfully " + iteration + " " + methodName );
				log.info("Test finish : successfully " + iteration + " " + methodName );

			} catch (AssertionError ar) {
				log.error("Test result failed on assertion error: Please review log file");
				GeneralUtility.sendReporter("Test result failed on assertion error: ");
				GeneralUtility.reportLogScreenshot(GeneralUtility.printScreen(driver, "Failed_Assert"));
				log.log(Level.ERROR, ar);
				Reporter.getCurrentTestResult().setStatus(ITestResult.FAILURE);
			} catch (Exception ex) {
				log.error("Test result failed: Please review log file");
				GeneralUtility.sendReporter("Test result Please review the log");
				GeneralUtility.reportLogScreenshot(GeneralUtility.printScreen(driver, "Failed_assert_verification"));
				Reporter.getCurrentTestResult().setStatus(ITestResult.FAILURE);
				log.log(Level.ERROR, ex);
				Reporter.getCurrentTestResult().setStatus(ITestResult.FAILURE);
			}
			
			timestamp = new Timestamp(System.currentTimeMillis());
			GeneralUtility.sendReporter("Test finish: Iteration: " + iteration +" time:" + timestamp);
			log.info("Test finish: Iteration: " + iteration +" time:" + timestamp);
		}

		
	
	
	@AfterMethod
	public void Exit_Clean_After_Test() throws IOException, InterruptedException {
		log.info("After method ...");
		//driver.manage().deleteAllCookies();
		driver.quit();
		GeneralUtility.endOfTestDelimiter();
	}

	@AfterClass
	public void End_Exectuion() throws IOException, InterruptedException {
		log.info("After Class ...");
		//GeneralUtility.tearDown(driver);
		timestamp = new Timestamp(System.currentTimeMillis());
		log.info("Test Finished: " + timestamp);
	}
	
	
}

